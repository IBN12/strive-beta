(()=>{"use strict";var n={159:(n,e,t)=>{t.d(e,{A:()=>s});var a=t(354),o=t.n(a),i=t(314),r=t.n(i)()(o());r.push([n.id,":root{\n    --battleStationHalfWidth:0px; \n}\n/* body - The main body for the browser. */\nbody{\n    padding: 0;\n    margin: 0; \n}\n\n/* * - All the elements in the application. */\n*{\n    box-sizing: border-box;\n}\n\n.no-clicks{\n    pointer-events: none; \n}\n\n/************************************************************************************************************************************************************************/\n/************************************************************************************************************************************************************************/\n/* |Mobile Viewports| */\n@media screen and (max-width: 600px){\n    /* |Main Content| */\n    #content{\n        border: 1px solid red; \n        padding: 5px; \n    }\n\n    /* |Main Menu Content| */\n    .main-menu-content{\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 10px;\n\n        border: 1px solid blue;\n    }\n\n    /* |Shuffle Cards Content| */\n    .shuffle-cards-content{\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n\n        border: 1px solid  orange; \n        margin-top: 10px;\n        padding: 3px;\n    }\n\n    .display-shuffled-cards{ /* Display Shuffled Cards */\n        display: flex; \n        gap: 3px;\n\n        padding: 10px;\n        border: 1px solid green; \n    }\n    .display-shuffled-cards > div{ /* Cards in the 'display shuffled cards' */ \n        flex: 1;\n\n        text-align: center; \n        font-size: 11px; \n        border: 1px solid purple;\n        height: 80px;\n    }\n    .shuffle-card-animation{ /* shuffle card animation for 'display shuffled cards' */\n        animation-name: shuffle-card-anim;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes shuffle-card-anim{\n        from{\n            transform: scale(1);\n        }\n        to{\n            transform: scale(1.2); \n        }\n    }\n\n    .view-card{ /* View cards in 'display shuffled cards'*/\n        position: absolute;\n        top: 0;\n        right: 0; \n        width: 100%;\n        height: 400px; \n        padding: 5px;\n        border: 1px solid black; \n        background-color: rgba(0, 0, 0, 0.658);\n    }\n    .open-view-card{\n        animation-name: open-view-card-anim;\n        animation-duration: .5s;\n        animation-timing-function: ease-out;\n        will-change: transform; \n    }\n    @keyframes open-view-card-anim{\n        from{\n            transform: perspective(800px) translate3d(0, 0, -1500px); \n        }\n        to{\n            transform: perspective(800px) translate3d(0,0,0);\n        }\n    }\n    .close-view-card{\n        animation-name: close-view-card-anim; \n        animation-duration: .5s; \n        animation-timing-function: ease-in;\n        will-change: transform; \n    }\n    @keyframes close-view-card-anim{\n        from{\n            transform: perspective(800px) translate3d(0, 0, 0); \n        }\n        to{\n            transform: perspective(800px) translate3d(0, 0, -1500px); \n        }\n    }\n    .view-card > div{ \n        display: flex;\n        justify-content: end;\n\n        border: 1px solid orange; \n    }\n    .view-card > div > img[src]{ /* Close Button */\n        height: 50px;\n    }\n\n    .display-number-of-shuffles{ /* Display Number of Shuffles */\n        border: 1px solid black;\n        text-align: center; \n    }\n    .shuffle-limit-reached{ /* Shuffle Limit Reached */\n        animation-name: shuffle-limit-reached-anim;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes shuffle-limit-reached-anim{\n        from{\n            transform: scale(1); \n            border-color: initial;\n        }\n        to{\n            transform: scale(1.1);  \n            border-color: red; \n        }\n    }\n\n    /* |Loading Room Content| */\n    .loading-room-content{\n        border: 1px solid purple; \n        margin-top: 10px; \n        padding: 3px;\n    }\n\n    /* |Battle Arena Content| */\n    .battle-arena-content{ \n        display: flex; \n        flex-direction: column; \n        gap: 10px; \n\n        border: 1px solid lightcoral;\n        margin-top: 10px;\n        padding: 3px; \n    }\n    .singularity-point-station{ /* Singularity Point Station */\n        display: flex;\n\n        border: 1px solid darkorange; \n        padding: 3px; \n    }\n    .singularity-point-station > div{ /* User Singularity Points & Comp Singularity Points */\n        flex: 1; \n\n        border: 1px solid red;\n        text-align: center;\n    }\n    .battle-station{ /* Battle Station */\n        display: flex;\n        justify-content: space-between; \n        gap: 100px;\n\n        border: 1px solid blue;\n        padding: 3px;\n    }\n    .battle-station > div{ /* User & Computer battle card */\n        border: 1px solid black;\n        height: 80px; /* Testing width */\n        width: 80px; /* Testing height */\n    }\n\n    .card-deck-station{ /* Card Deck Station */\n        display: flex;\n        justify-content: space-between;\n        gap: 5px;\n\n        border: 1px solid darkgreen;\n        padding: 3px;\n    }\n    .card-deck-station > div:nth-child(1){ /* User Deck Station */\n        display: flex;\n        gap: 5px;\n\n        border: 1px solid black;\n        padding: 2px;\n    }\n    .card-deck-station > div:nth-child(1) > div{ /* User cards in deck station */ \n        text-align: center; \n        border: 1px solid red;\n        font-size: 8px;\n        width: 30px; /* Testing width */\n    }\n\n    .card-deck-station > div:nth-child(2){ /* Comp Deck Station */\n        display: flex;\n        gap: 5px;\n        \n        border: 1px solid black;\n        padding: 2px;\n    }\n    .card-deck-station > div:nth-child(2) > div{ /* Comp cards in deck station */\n        text-align: center;\n        border: 1px solid blue;\n        font-size: 8px;\n        width: 30px;  /* Testing width */ \n    }\n\n    .card-stat-station{ /* Card Stat Station */\n        display: flex; \n        justify-content: space-around; \n        gap: 100px; \n\n        border: 1px solid yellowgreen; \n        padding: 2px; \n    }\n    .card-stat-station > div /* User & Comp Card Stats */\n    {\n        border: 1px solid black; \n        font-size: 15px;\n        padding: 3px; \n    }\n\n    .control-station{ /* Control Station */\n        display: flex; \n        justify-content: center; \n        gap: 5px; \n\n        border: 1px solid darkcyan;\n        padding: 2px; \n    }\n\n    .user-atk-movement{ /* User Attack Movement */\n        animation-name: userAtkMovement;\n        animation-duration: .5s;\n        animation-timing-function: ease-out;\n        will-change: transform; \n    }\n    @keyframes userAtkMovement{\n        from{\n            transform: translateX(0);\n        }\n        to{\n            transform: translateX(var(--battleStationHalfWidth)); \n        }\n    }\n\n    .user-damage-container{ /* User Damage Container Message */\n        position: absolute;\n        border: 1px solid black;\n\n        animation-name: userDamageContainerAnim;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards; \n    }\n    @keyframes userDamageContainerAnim{\n        from{\n            transform: translate3d(0, -20px,0);\n        }\n        to{\n            transform: translate3d(140px, -100px, 200px);\n        }\n    }\n\n    .comp-atk-movement{ /* Computer Attack Movement */\n        animation-name: compAtkMovement;\n        animation-duration: .5s;\n        animation-timing-function: ease-in-out;\n        will-change: transform;\n    }\n    @keyframes compAtkMovement{\n        from{\n            transform: translateX(0);\n        }\n        to{\n            transform: translateX(var(--battleStationHalfWidth));\n        }\n    }\n\n    .comp-damage-container{ /* Computer Damage Container Message */\n        position: absolute;\n        border: 1px solid black;\n\n        animation-name: compDamageContainerAnim;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n    }\n    @keyframes compDamageContainerAnim{\n        from{\n            transform: translate3d(0,-20px,0);\n        }\n        to{\n            transform: translate3d(-140px, -100px, 200px); \n        }\n    }\n\n    .user-def-movement{ /* User Defend Movement */\n        animation-name: userDefendAnim;\n        animation-duration: .2s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n    }\n    @keyframes userDefendAnim{\n        from{\n            transform: rotate(0); \n        }\n        to{\n            transform: rotate(10deg);\n        }\n    }\n\n    .comp-def-movement{ /* Comp Defend Movement */\n        animation-name: compDefendAnim;\n        animation-duration: .2s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n    }\n    @keyframes compDefendAnim{\n        from{\n            transform: rotate(0);\n        }\n        to{\n            transform: rotate(-10deg);  \n        }\n    }\n    \n    .death{ /* Death for User|Comp Cards. */\n        background-color: red;\n        animation-name: deathAnim;\n        animation-duration: .6s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes deathAnim{\n        0%{\n            transform: rotateX(0);\n        }\n        20%{\n            transform: rotateX(90deg);\n        }\n        40%{\n            transform: rotateX(0);\n        }\n        60%{\n            transform: rotateX(90deg);\n        }\n        80%{\n            transform: rotateX(0); \n        }\n        100%{\n            transform: rotateX(90deg); \n        }\n    }\n\n    .critical-hit-damage{ /* Critical Hit Damage Animation */\n        animation-name: criticalHitDmgAnim;\n        animation-duration: .3s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes criticalHitDmgAnim{\n        0%{\n            transform: rotateY(60deg);\n        }\n        30%{\n            transform: rotateY(0);\n        }\n        50%{\n            transform: rotateY(-60deg);\n        }\n        70%{\n            transform: rotateY(0);\n        }\n        100%{\n            transform: rotateY(60deg); \n        }\n    }\n\n    .regular-hit-damage{ /* Regular Hit Damage Animation */\n        animation-name: regularHitDmgAnim;\n        animation-duration: .3s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes regularHitDmgAnim{\n        0%{\n            transform: rotateY(30deg); \n        }\n        50%{\n            transform: rotateY(0); \n        }\n        70%{\n            transform: rotateY(-30deg); \n        }\n        100%{\n            transform: rotateY(0); \n        }\n    }\n\n    .regular-hit-damage-def{\n\n    }\n}","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"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",sourcesContent:[":root{\n    --battleStationHalfWidth:0px; \n}\n/* body - The main body for the browser. */\nbody{\n    padding: 0;\n    margin: 0; \n}\n\n/* * - All the elements in the application. */\n*{\n    box-sizing: border-box;\n}\n\n.no-clicks{\n    pointer-events: none; \n}\n\n/************************************************************************************************************************************************************************/\n/************************************************************************************************************************************************************************/\n/* |Mobile Viewports| */\n@media screen and (max-width: 600px){\n    /* |Main Content| */\n    #content{\n        border: 1px solid red; \n        padding: 5px; \n    }\n\n    /* |Main Menu Content| */\n    .main-menu-content{\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 10px;\n\n        border: 1px solid blue;\n    }\n\n    /* |Shuffle Cards Content| */\n    .shuffle-cards-content{\n        display: flex;\n        flex-direction: column;\n        gap: 10px;\n\n        border: 1px solid  orange; \n        margin-top: 10px;\n        padding: 3px;\n    }\n\n    .display-shuffled-cards{ /* Display Shuffled Cards */\n        display: flex; \n        gap: 3px;\n\n        padding: 10px;\n        border: 1px solid green; \n    }\n    .display-shuffled-cards > div{ /* Cards in the 'display shuffled cards' */ \n        flex: 1;\n\n        text-align: center; \n        font-size: 11px; \n        border: 1px solid purple;\n        height: 80px;\n    }\n    .shuffle-card-animation{ /* shuffle card animation for 'display shuffled cards' */\n        animation-name: shuffle-card-anim;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes shuffle-card-anim{\n        from{\n            transform: scale(1);\n        }\n        to{\n            transform: scale(1.2); \n        }\n    }\n\n    .view-card{ /* View cards in 'display shuffled cards'*/\n        position: absolute;\n        top: 0;\n        right: 0; \n        width: 100%;\n        height: 400px; \n        padding: 5px;\n        border: 1px solid black; \n        background-color: rgba(0, 0, 0, 0.658);\n    }\n    .open-view-card{\n        animation-name: open-view-card-anim;\n        animation-duration: .5s;\n        animation-timing-function: ease-out;\n        will-change: transform; \n    }\n    @keyframes open-view-card-anim{\n        from{\n            transform: perspective(800px) translate3d(0, 0, -1500px); \n        }\n        to{\n            transform: perspective(800px) translate3d(0,0,0);\n        }\n    }\n    .close-view-card{\n        animation-name: close-view-card-anim; \n        animation-duration: .5s; \n        animation-timing-function: ease-in;\n        will-change: transform; \n    }\n    @keyframes close-view-card-anim{\n        from{\n            transform: perspective(800px) translate3d(0, 0, 0); \n        }\n        to{\n            transform: perspective(800px) translate3d(0, 0, -1500px); \n        }\n    }\n    .view-card > div{ \n        display: flex;\n        justify-content: end;\n\n        border: 1px solid orange; \n    }\n    .view-card > div > img[src]{ /* Close Button */\n        height: 50px;\n    }\n\n    .display-number-of-shuffles{ /* Display Number of Shuffles */\n        border: 1px solid black;\n        text-align: center; \n    }\n    .shuffle-limit-reached{ /* Shuffle Limit Reached */\n        animation-name: shuffle-limit-reached-anim;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes shuffle-limit-reached-anim{\n        from{\n            transform: scale(1); \n            border-color: initial;\n        }\n        to{\n            transform: scale(1.1);  \n            border-color: red; \n        }\n    }\n\n    /* |Loading Room Content| */\n    .loading-room-content{\n        border: 1px solid purple; \n        margin-top: 10px; \n        padding: 3px;\n    }\n\n    /* |Battle Arena Content| */\n    .battle-arena-content{ \n        display: flex; \n        flex-direction: column; \n        gap: 10px; \n\n        border: 1px solid lightcoral;\n        margin-top: 10px;\n        padding: 3px; \n    }\n    .singularity-point-station{ /* Singularity Point Station */\n        display: flex;\n\n        border: 1px solid darkorange; \n        padding: 3px; \n    }\n    .singularity-point-station > div{ /* User Singularity Points & Comp Singularity Points */\n        flex: 1; \n\n        border: 1px solid red;\n        text-align: center;\n    }\n    .battle-station{ /* Battle Station */\n        display: flex;\n        justify-content: space-between; \n        gap: 100px;\n\n        border: 1px solid blue;\n        padding: 3px;\n    }\n    .battle-station > div{ /* User & Computer battle card */\n        border: 1px solid black;\n        height: 80px; /* Testing width */\n        width: 80px; /* Testing height */\n    }\n\n    .card-deck-station{ /* Card Deck Station */\n        display: flex;\n        justify-content: space-between;\n        gap: 5px;\n\n        border: 1px solid darkgreen;\n        padding: 3px;\n    }\n    .card-deck-station > div:nth-child(1){ /* User Deck Station */\n        display: flex;\n        gap: 5px;\n\n        border: 1px solid black;\n        padding: 2px;\n    }\n    .card-deck-station > div:nth-child(1) > div{ /* User cards in deck station */ \n        text-align: center; \n        border: 1px solid red;\n        font-size: 8px;\n        width: 30px; /* Testing width */\n    }\n\n    .card-deck-station > div:nth-child(2){ /* Comp Deck Station */\n        display: flex;\n        gap: 5px;\n        \n        border: 1px solid black;\n        padding: 2px;\n    }\n    .card-deck-station > div:nth-child(2) > div{ /* Comp cards in deck station */\n        text-align: center;\n        border: 1px solid blue;\n        font-size: 8px;\n        width: 30px;  /* Testing width */ \n    }\n\n    .card-stat-station{ /* Card Stat Station */\n        display: flex; \n        justify-content: space-around; \n        gap: 100px; \n\n        border: 1px solid yellowgreen; \n        padding: 2px; \n    }\n    .card-stat-station > div /* User & Comp Card Stats */\n    {\n        border: 1px solid black; \n        font-size: 15px;\n        padding: 3px; \n    }\n\n    .control-station{ /* Control Station */\n        display: flex; \n        justify-content: center; \n        gap: 5px; \n\n        border: 1px solid darkcyan;\n        padding: 2px; \n    }\n\n    .user-atk-movement{ /* User Attack Movement */\n        animation-name: userAtkMovement;\n        animation-duration: .5s;\n        animation-timing-function: ease-out;\n        will-change: transform; \n    }\n    @keyframes userAtkMovement{\n        from{\n            transform: translateX(0);\n        }\n        to{\n            transform: translateX(var(--battleStationHalfWidth)); \n        }\n    }\n\n    .user-damage-container{ /* User Damage Container Message */\n        position: absolute;\n        border: 1px solid black;\n\n        animation-name: userDamageContainerAnim;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards; \n    }\n    @keyframes userDamageContainerAnim{\n        from{\n            transform: translate3d(0, -20px,0);\n        }\n        to{\n            transform: translate3d(140px, -100px, 200px);\n        }\n    }\n\n    .comp-atk-movement{ /* Computer Attack Movement */\n        animation-name: compAtkMovement;\n        animation-duration: .5s;\n        animation-timing-function: ease-in-out;\n        will-change: transform;\n    }\n    @keyframes compAtkMovement{\n        from{\n            transform: translateX(0);\n        }\n        to{\n            transform: translateX(var(--battleStationHalfWidth));\n        }\n    }\n\n    .comp-damage-container{ /* Computer Damage Container Message */\n        position: absolute;\n        border: 1px solid black;\n\n        animation-name: compDamageContainerAnim;\n        animation-duration: 1s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n    }\n    @keyframes compDamageContainerAnim{\n        from{\n            transform: translate3d(0,-20px,0);\n        }\n        to{\n            transform: translate3d(-140px, -100px, 200px); \n        }\n    }\n\n    .user-def-movement{ /* User Defend Movement */\n        animation-name: userDefendAnim;\n        animation-duration: .2s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n    }\n    @keyframes userDefendAnim{\n        from{\n            transform: rotate(0); \n        }\n        to{\n            transform: rotate(10deg);\n        }\n    }\n\n    .comp-def-movement{ /* Comp Defend Movement */\n        animation-name: compDefendAnim;\n        animation-duration: .2s;\n        animation-timing-function: ease-in-out;\n        animation-fill-mode: forwards;\n    }\n    @keyframes compDefendAnim{\n        from{\n            transform: rotate(0);\n        }\n        to{\n            transform: rotate(-10deg);  \n        }\n    }\n    \n    .death{ /* Death for User|Comp Cards. */\n        background-color: red;\n        animation-name: deathAnim;\n        animation-duration: .6s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes deathAnim{\n        0%{\n            transform: rotateX(0);\n        }\n        20%{\n            transform: rotateX(90deg);\n        }\n        40%{\n            transform: rotateX(0);\n        }\n        60%{\n            transform: rotateX(90deg);\n        }\n        80%{\n            transform: rotateX(0); \n        }\n        100%{\n            transform: rotateX(90deg); \n        }\n    }\n\n    .critical-hit-damage{ /* Critical Hit Damage Animation */\n        animation-name: criticalHitDmgAnim;\n        animation-duration: .3s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes criticalHitDmgAnim{\n        0%{\n            transform: rotateY(60deg);\n        }\n        30%{\n            transform: rotateY(0);\n        }\n        50%{\n            transform: rotateY(-60deg);\n        }\n        70%{\n            transform: rotateY(0);\n        }\n        100%{\n            transform: rotateY(60deg); \n        }\n    }\n\n    .regular-hit-damage{ /* Regular Hit Damage Animation */\n        animation-name: regularHitDmgAnim;\n        animation-duration: .3s;\n        animation-timing-function: ease-in-out;\n    }\n    @keyframes regularHitDmgAnim{\n        0%{\n            transform: rotateY(30deg); \n        }\n        50%{\n            transform: rotateY(0); \n        }\n        70%{\n            transform: rotateY(-30deg); \n        }\n        100%{\n            transform: rotateY(0); \n        }\n    }\n\n    .regular-hit-damage-def{\n\n    }\n}"],sourceRoot:""}]);const s=r},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(a)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(r[d]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);a&&r[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var i={},r=[],s=0;s<n.length;s++){var d=n[s],c=a.base?d[0]+a.base:d[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var m=t(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)e[m].references++,e[m].updater(u);else{var C=o(u,a);a.byIndex=s,e.splice(s,0,{identifier:A,updater:C,references:1})}r.push(A)}return r}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=a(n=n||[],o=o||{});return function(n){n=n||[];for(var r=0;r<i.length;r++){var s=t(i[r]);e[s].references--}for(var d=a(n,o),c=0;c<i.length;c++){var l=t(i[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=d}}},659:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,o&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(a){var o=e[a];if(void 0!==o)return o.exports;var i=e[a]={id:a,exports:{}};return n[a](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");if(a.length)for(var o=a.length-1;o>-1&&(!n||!/^http(s?):/.test(n));)n=a[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0;let a=[],o=[{name:"Tobo The Fighter",cate:"supra",atk:44,def:12,esse:100,tempName:"Tobo",defending:!1,beenHit:!1},{name:"The One From System",cate:"supra",atk:46,def:10,esse:100,tempName:"Jace",defending:!1,beenHit:!1},{name:"Spunky With The Funky Draco",cate:"supra",atk:39,def:11,esse:100,tempName:"Spunky",defending:!1,beenHit:!1},{name:"The Trendsetter Rotao",cate:"fere",atk:25,def:18,esse:100,tempName:"Rotao",defending:!1,beenHit:!1},{name:"Allybelle",cate:"fere",atk:27,def:15,esse:100,tempName:"Ally",defending:!1,beenHit:!1},{name:"The Experiment",cate:"fere",atk:24,def:13,esse:100,tempName:"Mason",defending:!1,beenHit:!1},{name:"Dan The Prol",cate:"bonum",atk:19,def:22,esse:100,tempName:"Dan",defending:!1,beenHit:!1},{name:"Mac The Rat",cate:"bonum",atk:13,def:28,esse:100,tempName:"Mac",defending:!1,beenHit:!1},{name:"A Karen",cate:"bonum",atk:15,def:26,esse:100,tempName:"Karen",defending:!1,beenHit:!1},{name:"The office Worker Ken",cate:"bonum",atk:16,def:25,esse:100,tempName:"Ken",defending:!1,beenHit:!1}];function i(){let n=[],e=[],t=[],a=[],i=[];return o.forEach((n=>{"supra"===n.cate?e.push(n):"fere"===n.cate?t.push(n):"bonum"===n.cate&&a.push(n)})),n.push(e[function(n){return Math.floor(Math.random()*n.length)}(e)]),n.push(t[function(n){return Math.floor(Math.random()*n.length)}(t)]),i=function(n){let e=!1,t=[],a=Math.floor(Math.random()*n.length);for(t.push(a);!e;)a=Math.floor(Math.random()*n.length),t.includes(a)||(t.push(a),e=!0);return t}(a),i.forEach((e=>{n.push(a[e])})),n}let r={numOfShuffles:0,endShuffles:!1,commenceShuffleAnim:!1,mainBattleCard:null,switchCard:null,singularityPoints:0,priorMove:null,isDefending:!1};const s=t.p+"8d8048858a47def2e8d1.svg";function d(n){const e=document.querySelector(".shuffle-cards-content"),t=document.querySelector(".shuffle-cards-content > button:nth-child(2)"),a=document.querySelector(".display-number-of-shuffles"),o=document.querySelector(".shuffle-cards-content > button:nth-child(4)");0===n?(e.replaceChildren(),c(),m(),C(),f()):1===n?(e.removeChild(t),e.removeChild(a),e.removeChild(o),m(),C(),f()):null===n&&(c(),m(),C(),f())}function c(){const n=document.querySelector(".shuffle-cards-content"),e=document.createElement("div");e.classList.add("display-shuffled-cards");for(let n=0;n<4;n++){const t=document.createElement("div");e.appendChild(t),0===a.length?t.textContent="No Card":(t.textContent=`${a[n].name}`,t.addEventListener("click",l))}n.appendChild(e)}function l(n){const e=document.getElementById("content"),t=document.querySelector(".shuffle-cards-content > button:nth-child(2)"),a=document.querySelector(".shuffle-cards-content > button:nth-child(4)");document.querySelector(".display-shuffled-cards").classList.add("no-clicks"),t.disabled=!0,a.disabled=!0;const o=document.createElement("div");o.classList.add("view-card"),o.classList.add("open-view-card");const i=document.createElement("div"),r=document.createElement("img");r.alt="View Card Close Button",r.src=s,r.addEventListener("click",A);const d=document.createElement("div"),c=document.createElement("div");c.textContent=n.target.textContent,o.appendChild(i),o.appendChild(d),i.appendChild(r),d.appendChild(c),e.appendChild(o)}function A(n){const e=document.getElementById("content"),t=document.querySelector(".shuffle-cards-content > button:nth-child(2)"),a=document.querySelector(".shuffle-cards-content > button:nth-child(4)"),o=document.querySelector(".display-shuffled-cards"),i=document.querySelector(".view-card");i.classList.remove("open-view-card"),i.classList.add("close-view-card"),t.disabled=!1,a.disabled=!1,setTimeout((()=>{e.removeChild(i)}),500),setTimeout((()=>{o.classList.remove("no-clicks")}),700)}function m(){const n=document.querySelector(".shuffle-cards-content"),e=document.createElement("button");e.textContent="Shuffle",e.addEventListener("click",u),n.appendChild(e)}function u(){r.endShuffles?d(1):(document.querySelector(".shuffle-cards-content > button:nth-child(2)").disabled=!0,document.querySelector(".shuffle-cards-content > button:nth-child(4)").disabled=!0,a.length=0,a=i(),console.log("New User Deck: ",a),console.log("\n"),document.querySelectorAll(".display-shuffled-cards > div").forEach(((n,e)=>{switch(e){case 0:n.classList.add("shuffle-card-animation"),setTimeout((()=>{n.classList.remove("shuffle-card-animation")}),1e3);break;case 1:setTimeout((()=>{n.classList.add("shuffle-card-animation")}),1e3),setTimeout((()=>{n.classList.remove("shuffle-card-animation")}),2e3);break;case 2:setTimeout((()=>{n.classList.add("shuffle-card-animation")}),2e3),setTimeout((()=>{n.classList.remove("shuffle-card-animation")}),3e3);break;case 3:setTimeout((()=>{n.classList.add("shuffle-card-animation")}),3e3),setTimeout((()=>{n.classList.remove("shuffle-card-animation")}),4e3);break;default:return}})),setTimeout((()=>{d(0)}),5e3))}function C(){const n=document.querySelector(".shuffle-cards-content"),e=document.createElement("div");e.classList.add("display-number-of-shuffles"),e.textContent=`Shuffles: ${r.numOfShuffles}`,r.numOfShuffles>=3?(e.classList.add("shuffle-limit-reached"),r.endShuffles=!0):r.numOfShuffles++,n.appendChild(e)}function f(){const n=document.querySelector(".shuffle-cards-content"),e=document.createElement("button");e.textContent="Start Game",e.addEventListener("click",(()=>{console.log("TO: ShuffleComputerCards() - Loading Room")})),n.appendChild(e)}let p={numOfDuplicates:0,stopDuplicateTest:!1,newCompDeck:[],mainBattleCard:null,singularityPoints:0,cardSwitches:0,cardsToSwitch:[],compChoiceOne:["Attack","Defend","Switch"],compChoiceTwo:["Attack","Defend"],isDefending:!1,compMisses:[]};function h(){return p.stopDuplicateTest||(p.newCompDeck=JSON.parse(JSON.stringify(i()))),console.log("Comp Deck: ",p.newCompDeck),console.log("User Deck: ",a),p.newCompDeck.forEach((n=>{for(let e=0;e<a.length;e++)n.name===a[e].name&&(console.log("Comp Deck Duplicate: ",n.name),p.numOfDuplicates++)})),console.log("\n"),p.numOfDuplicates>=2?(p.numOfDuplicates=0,h()):p.stopDuplicateTest=!0,p.newCompDeck}let B=[];function g(n,e,t){"user"===t?p.isDefending?function(n,e){0===n?r.singularityPoints+=0:n===Number((1/3).toFixed(1))?r.singularityPoints+=10-Math.trunc(e/100*10):.5===n?r.singularityPoints+=20-Math.trunc(e/100*20):n===Number((2/3).toFixed(1))?r.singularityPoints+=30-Math.trunc(e/100*30):n===3/4?r.singularityPoints+=50-Math.trunc(e/100*50):1===n&&(r.singularityPoints+=80-Math.trunc(e/100*80))}(n,e):function(n){0===n?r.singularityPoints+=0:n===Number((1/3).toFixed(1))?r.singularityPoints+=10:.5===n?r.singularityPoints+=20:n===Number((2/3).toFixed(1))?r.singularityPoints+=30:n===3/4?r.singularityPoints+=50:1===n&&(r.singularityPoints+=80)}(n):r.isDefending?function(n,e){0===n?p.singularityPoints+=0:n===Number((1/3).toFixed(1))?p.singularityPoints+=10-Math.trunc(e/100*10):.5===n?p.singularityPoints+=20-Math.trunc(e/100*20):n===Number((2/3).toFixed(1))?p.singularityPoints+=30-Math.trunc(e/100*30):n===3/4?p.singularityPoints+=50-Math.trunc(e/100*50):1===n&&(p.singularityPoints+=80-Math.trunc(e/100*80))}(n,e):function(n){0===n?p.singularityPoints+=0:n===Number((1/3).toFixed(1))?p.singularityPoints+=10:.5===n?p.singularityPoints+=20:n===Number((2/3).toFixed(1))?p.singularityPoints+=30:n===3/4?p.singularityPoints+=50:1===n&&(p.singularityPoints+=80)}(n)}function x(n,e){return"user"===n?function(n){if("Attack"===n){const n=2/3,e=[Number((1/3).toFixed(1)),.5,0,Number(n.toFixed(1)),3/4,1,0],t=v(e.length);if(g(e[t],p.mainBattleCard.def,"user"),p.isDefending){console.log("User Attack Point: ",e[t]);const n=Math.trunc(r.mainBattleCard.atk*e[t]*(p.mainBattleCard.def/100));p.mainBattleCard.esse=p.mainBattleCard.esse-(r.mainBattleCard.atk*e[t]-n),p.mainBattleCard.esse=Math.trunc(p.mainBattleCard.esse)}else p.mainBattleCard.esse=p.mainBattleCard.esse-r.mainBattleCard.atk*e[t],p.mainBattleCard.esse=Math.trunc(p.mainBattleCard.esse);if(p.mainBattleCard.esse<=0&&(p.mainBattleCard.esse=0),p.isDefending){const n=Math.trunc(r.mainBattleCard.atk*e[t]*(p.mainBattleCard.def/100));return 0===e[t]?"Miss!":1===e[t]?`${Math.trunc(r.mainBattleCard.atk-n)} Damage!`:`${Math.trunc(r.mainBattleCard.atk*e[t]-n)} Damage!`}return 0===e[t]?"Miss!":1===e[t]?`${r.mainBattleCard.atk} Critial Hit!`:`${Math.trunc(r.mainBattleCard.atk*e[t])} Damage!`}}(e):function(n){if("Attack"===n){const n=2/3,e=[Number((1/3).toFixed(1)),.5,0,Number(n.toFixed(1)),3/4,1,0],t=v(e.length);if(g(e[t],r.mainBattleCard.def,"comp"),r.isDefending){console.log("Comp Attack Point: ",e[t]);const n=Math.trunc(p.mainBattleCard.atk*e[t]*(r.mainBattleCard.def/100));r.mainBattleCard.esse=r.mainBattleCard.esse-(p.mainBattleCard.atk*e[t]-n),r.mainBattleCard.esse=Math.trunc(r.mainBattleCard.esse)}else r.mainBattleCard.esse=r.mainBattleCard.esse-p.mainBattleCard.atk*e[t],r.mainBattleCard.esse=Math.trunc(r.mainBattleCard.esse);if(r.mainBattleCard.esse<=0&&(r.mainBattleCard.esse=0),r.isDefending){const n=Math.trunc(p.mainBattleCard.atk*e[t]*(r.mainBattleCard.def/100));return 0===e[t]?"Miss!":1===e[t]?`${Math.trunc(p.mainBattleCard.atk-n)} Damage!`:`${Math.trunc(p.mainBattleCard.atk*e[t]-n)} Damage!`}return 0===e[t]?"Miss!":1===e[t]?`${p.mainBattleCard.atk} Critical Hit!`:`${Math.trunc(p.mainBattleCard.atk*e[t])} Damage!`}}(e)}function v(n){return Math.floor(Math.random()*n)}function y(n){const e=document.querySelector(".battle-arena-content"),t=document.querySelector(".singularity-point-station"),a=document.querySelector(".battle-station"),o=document.querySelector(".card-stat-station"),i=document.querySelector(".card-deck-station"),s=document.querySelector(".control-station");null===n?(Q(),k(n),I(),E(),D()):1===n?(e.removeChild(t),e.removeChild(a),e.removeChild(o),e.removeChild(i),e.removeChild(s),Q(),k(n),I(),E(),D(),b(1)):2===n?(e.removeChild(o),e.removeChild(i),e.removeChild(s),I(),E(),D(),b(2),setTimeout((()=>{y(3)}),1e3)):3===n?(e.removeChild(t),e.removeChild(a),e.removeChild(o),e.removeChild(i),e.removeChild(s),Q(),k(1),I(),E(),D(),b(2),function(){if(0===p.mainBattleCard.esse)document.querySelector(".battle-station > div:nth-child(2)").classList.add("death"),B.forEach(((n,e)=>{0===n.esse&&B.splice(e,1)})),0===B.length?setTimeout((()=>{y(6)}),2e3):setTimeout((()=>{y(4)}),2e3);else if(0===r.mainBattleCard.esse){const n=document.querySelector(".battle-station > div:nth-child(1)");console.log("The user card is dead: ",n)}}()):4===n?(e.removeChild(t),e.removeChild(a),e.removeChild(o),e.removeChild(i),e.removeChild(s),Q(),k(2),I(),E(),D(),b(2)):6===n?(e.removeChild(t),e.removeChild(a),e.removeChild(o),e.removeChild(i),e.removeChild(s),Q(),k(3),I(),E(),D(),b(3)):7===n?(e.removeChild(t),e.removeChild(a),e.removeChild(o),e.removeChild(i),e.removeChild(s),Q(),k(1),I(),E(),D(),b(2),setTimeout((()=>{M()}),800)):8===n&&(e.removeChild(t),e.removeChild(a),e.removeChild(o),e.removeChild(i),e.removeChild(s),Q(),k(4),I(),E(),D(),b(2))}function b(n){const e=document.querySelectorAll(".control-station > button"),t=document.querySelectorAll(".card-deck-station > div:nth-child(1) > div");1===n?(e.forEach((n=>{n.disabled=!0})),t.forEach((n=>{n.classList.add("no-clicks")})),setTimeout((()=>{e.forEach((n=>{n.disabled=!1})),t.forEach((n=>{n.classList.remove("no-clicks")}))}),500)):2===n?(e.forEach((n=>{n.disabled=!0})),t.forEach((n=>{n.classList.add("no-clicks")})),setTimeout((()=>{e.forEach((n=>{n.disabled=!1})),t.forEach((n=>{n.classList.remove("no-clicks")}))}),2e3)):3===n&&(e.forEach((n=>{n.disabled=!0})),t.forEach((n=>{n.classList.add("no-clicks")})))}function Q(){const n=document.querySelector(".battle-arena-content"),e=document.createElement("div");e.classList.add("singularity-point-station");const t=document.createElement("div");t.textContent=`${r.singularityPoints} sp`;const a=document.createElement("div");a.textContent=`${p.singularityPoints} sp`,e.appendChild(t),e.appendChild(a),n.appendChild(e)}function k(n){const e=document.querySelector(".battle-arena-content"),t=document.createElement("div");t.classList.add("battle-station");const o=document.createElement("div");null===n?(r.mainBattleCard=a[0],o.textContent=r.mainBattleCard.name):0===n?o.textContent=r.mainBattleCard.name:1===n?(r.isDefending&&o.classList.add("user-def-movement"),o.textContent=r.mainBattleCard.name):2===n||3===n?o.textContent=r.mainBattleCard.name:4===n&&(r.isDefending&&o.classList.add("user-def-movement"),o.textContent=r.mainBattleCard.name);const i=document.createElement("div");null===n?(p.mainBattleCard=B[0],i.textContent=p.mainBattleCard.name):0===n?i.textContent=p.mainBattleCard.name:1===n?(p.isDefending&&i.classList.add("comp-def-movement"),i.textContent=p.mainBattleCard.name):2===n?(p.mainBattleCard=B[0],i.textContent=p.mainBattleCard.name):3===n?(p.mainBattleCard=null,i.textContent="No Card"):4===n&&(p.isDefending&&i.classList.add("comp-def-movement"),i.textContent=p.mainBattleCard.name),t.appendChild(o),t.appendChild(i),e.appendChild(t)}function I(){const n=document.querySelector(".battle-arena-content"),e=document.createElement("div");e.classList.add("card-stat-station");const t=document.createElement("div");a.forEach((n=>{if(n.tempName===r.mainBattleCard.tempName){const e=document.createElement("div");e.textContent=`Name: ${n.tempName}`,t.appendChild(e);const a=document.createElement("div");a.textContent=`Cate: ${n.cate}`,t.appendChild(a);const o=document.createElement("div");o.textContent=`Atk: ${n.atk}`,t.appendChild(o);const i=document.createElement("div");i.textContent=`Def: ${n.def}`,t.appendChild(i);const r=document.createElement("div");r.textContent=`Esse: ${n.esse}`,t.appendChild(r)}}));const o=document.createElement("div");null===p.mainBattleCard?o.textContent="No Stats":B.forEach((n=>{if(n.tempName===p.mainBattleCard.tempName){const e=document.createElement("div");e.textContent=`Name: ${n.tempName}`,o.appendChild(e);const t=document.createElement("div");t.textContent=`Cate: ${n.cate}`,o.appendChild(t);const a=document.createElement("div");a.textContent=`Atk: ${n.atk}`,o.appendChild(a);const i=document.createElement("div");i.textContent=`Def: ${n.def}`,o.appendChild(i);const r=document.createElement("div");r.textContent=`Esse: ${n.esse}`,o.appendChild(r)}})),e.appendChild(t),e.appendChild(o),n.appendChild(e)}function E(){const n=document.querySelector(".battle-arena-content"),e=document.createElement("div");e.classList.add("card-deck-station");const t=document.createElement("div");for(let n=0;n<a.length;n++)if(r.mainBattleCard.name!==a[n].name){const e=document.createElement("div");e.textContent=a[n].tempName,t.appendChild(e),e.addEventListener("click",S)}const o=document.createElement("div");for(let n=0;n<B.length;n++)if(p.mainBattleCard.name!==B[n].name){const e=document.createElement("div");e.textContent=B[n].tempName,o.appendChild(e)}1!==B.length&&0!==B.length||(o.textContent="Empty Deck"),e.appendChild(t),e.appendChild(o),n.appendChild(e)}function S(n){r.switchCard=n.target.textContent,a.forEach((n=>{n.tempName===r.switchCard&&(r.mainBattleCard=n)})),y(1)}function D(){const n=document.querySelector(".battle-arena-content"),e=document.createElement("div");e.classList.add("control-station");const t=document.createElement("button");t.textContent="Attack",t.addEventListener("click",w);const a=document.createElement("button");a.textContent="Defend",a.addEventListener("click",Y),e.appendChild(t),e.appendChild(a),n.appendChild(e)}function w(n){if("Attack"===n.target.textContent){const e=document.querySelector(".battle-station");document.documentElement.style.setProperty("--battleStationHalfWidth",e.clientWidth/4+"px"),document.querySelector(".battle-station > div:nth-child(1)").classList.add("user-atk-movement");const t=document.querySelector(".battle-station > div:nth-child(2)");document.querySelector(".control-station > button:nth-child(1)").disabled=!0,document.querySelector(".control-station > button:nth-child(2)").disabled=!0,document.querySelectorAll(".card-deck-station > div:nth-child(1) > div").forEach((n=>{n.classList.add("no-clicks")}));const a=x("user",n.target.textContent);console.log(a),r.priorAttack=a,p.isDefending&&(p.isDefending=!1),setTimeout((()=>{const n=document.createElement("div");n.classList.add("comp-damage-container"),n.textContent=a,t.appendChild(n),T(a,t,p,r),y(2)}),500)}0!==p.mainBattleCard.esse&&setTimeout((()=>{M()}),3e3)}function M(){const n=document.querySelector(".battle-station"),e=document.querySelector(".battle-station > div:nth-child(2)"),t=document.querySelector(".battle-station > div:nth-child(1)"),a=function(n){if(B.forEach((n=>{n.name!==p.mainBattleCard.name&&p.cardsToSwitch.push(n)})),"Miss!"===n||"Computer Switched"===n)return"Attack";if("supra"===p.mainBattleCard.cate)if(p.mainBattleCard.esse>50&&B.length>1){if(p.compMisses.length>=3){const n=Math.floor(Math.random()*p.compChoiceOne.length);return p.compChoiceOne[n]}}else{if(p.mainBattleCard.esse<50&&B.length>1){const n=Math.floor(Math.random()*p.compChoiceOne.length);return p.compChoiceOne[n]}if(p.mainBattleCard.esse<50&&1===B.length){const n=Math.floor(Math.random()*p.compChoiceTwo.length);return p.compChoiceTwo[n]}}else if("fere"===p.mainBattleCard.cate){if(p.mainBattleCard.esse<50&&B.length>1){const n=Math.floor(Math.random()*p.compChoiceOne.length);return p.compChoiceOne[n]}if(p.mainBattleCard.esse<50&&1===B.length){const n=Math.floor(Math.random()*p.compChoiceTwo.length);return p.compChoiceTwo[n]}}else if("bonum"===p.mainBattleCard.cate){if(p.mainBattleCard.esse<50&&B.length>1){const n=Math.floor(Math.random()*p.compChoiceOne.length);return p.compChoiceOne[n]}if(p.mainBattleCard.esse<50&&1===B.length){const n=Math.floor(Math.random()*p.compChoiceTwo.length);return p.compChoiceTwo[n]}}}(r.priorMove);if("Attack"===a){document.documentElement.style.setProperty("--battleStationHalfWidth",-n.clientWidth/4+"px"),e.classList.add("comp-atk-movement");const o=x("computer",a);console.log("Computer Attack: ",o),console.log("\n"),"Miss!"===o&&p.compMisses.push(o),setTimeout((()=>{const n=document.createElement("div");n.classList.add("user-damage-container"),n.textContent=o,t.appendChild(n),T(o,t,r,p),r.isDefending=!1,y(2)}),500)}else if("Switch"===a){const n=Math.floor(Math.random()*p.cardsToSwitch.length);p.mainBattleCard=p.cardsToSwitch[n],console.log("Computer Switches Cards"),console.log("\n"),r.priorMove="Computer Switch",setTimeout((()=>{y(7)}),500)}else if("Defend"===a)console.log("Computer Is Defending"),p.isDefending=!0,r.isDefending=!1,setTimeout((()=>{y(8)}),500);else{document.documentElement.style.setProperty("--battleStationHalfWidth",-n.clientWidth/4+"px"),e.classList.add("comp-atk-movement");const a=x("computer","Attack");console.log("Computer Attack: ",a),console.log("\n"),"Miss!"===a&&p.compMisses.push(a),setTimeout((()=>{const n=document.createElement("div");n.classList.add("user-damage-container"),n.textContent=a,t.appendChild(n),T(a,t,r,p),r.isDefending=!1,y(2)}),500)}}function Y(){console.log("User Is Defending"),r.isDefending=!0,r.priorMove="Defend",p.isDefending=!1,setTimeout((()=>{y(8)}),500),setTimeout((()=>{M()}),1e3)}function T(n,e,t,a){if("Miss!"===n);else{let o=n.slice(0,2);o=Number(o),o===a.mainBattleCard.atk?t.isDefending||e.classList.add("critical-hit-damage"):t.isDefending?e.classList.add("regular-hit-damage-def"):e.classList.add("regular-hit-damage")}}const q=t.p+"ae039dd38d82f83f7e0f.wav",L=t.p+"775970b1d2e5786b8304.mp3";var N=t(72),P=t.n(N),H=t(825),U=t.n(H),O=t(659),z=t.n(O),j=t(56),$=t.n(j),R=t(540),W=t.n(R),X=t(113),J=t.n(X),F=t(159),K={};K.styleTagTransform=J(),K.setAttributes=$(),K.insert=z().bind(null,"head"),K.domAPI=U(),K.insertStyleElement=W(),P()(F.A,K),F.A&&F.A.locals&&F.A.locals,console.log("|Strive Beta|"),console.log("Developer: SoSu Studios"),console.log("Programmer: IBE"),console.log("Start Date: July-24-2024"),console.log("\n"),function(){const n=document.getElementById("content"),e=document.createElement("div");e.classList.add("main-menu-content"),n.appendChild(e),function(){const n=document.querySelector(".main-menu-content"),e=document.createElement("h1");e.textContent="STRIVE",n.appendChild(e)}(),function(){const n=document.querySelector(".main-menu-content"),e=document.createElement("button");e.textContent="Quick Game",e.addEventListener("click",(()=>{console.log("TO: ShuffleCardsContent()")})),n.appendChild(e)}(),function(){const n=document.querySelector(".main-menu-content"),e=document.createElement("button");e.textContent="Settings",n.appendChild(e)}(),function(){const n=document.querySelector(".main-menu-content"),e=document.createElement("button");e.textContent="SoSu Studio",n.appendChild(e)}()}(),function(){const n=document.getElementById("content"),e=document.createElement("div");e.classList.add("shuffle-cards-content"),n.appendChild(e)}(),function(){const n=document.getElementById("content"),e=document.createElement("div");e.classList.add("loading-room-content"),n.appendChild(e)}(),function(){const n=document.getElementById("content"),e=document.createElement("div");e.classList.add("battle-arena-content"),n.appendChild(e)}(),d(null);const V=document.getElementById("content"),G=document.createElement("button");G.textContent="Test Button",G.addEventListener("click",(function(){console.log("If control 1: Loading up the computer deck."),B=[...h()],0!==B.length&&(console.log("Battle Arena will initiated in 10 seconds"),y(null)),new Audio(q)})),V.appendChild(G);const _=document.createElement("button");_.textContent="Test Main Menu Music",document.querySelector(".main-menu-content").appendChild(_),_.addEventListener("click",(function n(){const e=new Audio(L);e.play(),e.volume=.5,setTimeout((()=>{n()}),11500)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,